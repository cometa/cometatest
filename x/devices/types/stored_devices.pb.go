// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: devices/stored_devices.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredDevices struct {
	Index               string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DeviceAccount       string `protobuf:"bytes,2,opt,name=deviceAccount,proto3" json:"deviceAccount,omitempty"`
	DeviceClass         string `protobuf:"bytes,3,opt,name=deviceClass,proto3" json:"deviceClass,omitempty"`
	OwnerAddress        string `protobuf:"bytes,4,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	UserAddress         string `protobuf:"bytes,5,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	EscrowAddress       string `protobuf:"bytes,6,opt,name=escrowAddress,proto3" json:"escrowAddress,omitempty"`
	ManufacturerAddress string `protobuf:"bytes,7,opt,name=manufacturerAddress,proto3" json:"manufacturerAddress,omitempty"`
	PricePerUnit        uint64 `protobuf:"varint,8,opt,name=pricePerUnit,proto3" json:"pricePerUnit,omitempty"`
	CommissionPerUnit   uint64 `protobuf:"varint,9,opt,name=commissionPerUnit,proto3" json:"commissionPerUnit,omitempty"`
	BillingPeriod       int32  `protobuf:"varint,10,opt,name=billingPeriod,proto3" json:"billingPeriod,omitempty"`
	TotalBilledUnits    int32  `protobuf:"varint,11,opt,name=totalBilledUnits,proto3" json:"totalBilledUnits,omitempty"`
	LastPayment         int32  `protobuf:"varint,12,opt,name=lastPayment,proto3" json:"lastPayment,omitempty"`
	MetadataUrl         string `protobuf:"bytes,13,opt,name=metadataUrl,proto3" json:"metadataUrl,omitempty"`
	MetadataHash        string `protobuf:"bytes,14,opt,name=metadataHash,proto3" json:"metadataHash,omitempty"`
	ImageUrl            string `protobuf:"bytes,15,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ImageHash           string `protobuf:"bytes,16,opt,name=imageHash,proto3" json:"imageHash,omitempty"`
	CreatedAt           uint64 `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *StoredDevices) Reset()         { *m = StoredDevices{} }
func (m *StoredDevices) String() string { return proto.CompactTextString(m) }
func (*StoredDevices) ProtoMessage()    {}
func (*StoredDevices) Descriptor() ([]byte, []int) {
	return fileDescriptor_3704b1dd08f5317d, []int{0}
}
func (m *StoredDevices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredDevices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredDevices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredDevices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredDevices.Merge(m, src)
}
func (m *StoredDevices) XXX_Size() int {
	return m.Size()
}
func (m *StoredDevices) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredDevices.DiscardUnknown(m)
}

var xxx_messageInfo_StoredDevices proto.InternalMessageInfo

func (m *StoredDevices) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredDevices) GetDeviceAccount() string {
	if m != nil {
		return m.DeviceAccount
	}
	return ""
}

func (m *StoredDevices) GetDeviceClass() string {
	if m != nil {
		return m.DeviceClass
	}
	return ""
}

func (m *StoredDevices) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *StoredDevices) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *StoredDevices) GetEscrowAddress() string {
	if m != nil {
		return m.EscrowAddress
	}
	return ""
}

func (m *StoredDevices) GetManufacturerAddress() string {
	if m != nil {
		return m.ManufacturerAddress
	}
	return ""
}

func (m *StoredDevices) GetPricePerUnit() uint64 {
	if m != nil {
		return m.PricePerUnit
	}
	return 0
}

func (m *StoredDevices) GetCommissionPerUnit() uint64 {
	if m != nil {
		return m.CommissionPerUnit
	}
	return 0
}

func (m *StoredDevices) GetBillingPeriod() int32 {
	if m != nil {
		return m.BillingPeriod
	}
	return 0
}

func (m *StoredDevices) GetTotalBilledUnits() int32 {
	if m != nil {
		return m.TotalBilledUnits
	}
	return 0
}

func (m *StoredDevices) GetLastPayment() int32 {
	if m != nil {
		return m.LastPayment
	}
	return 0
}

func (m *StoredDevices) GetMetadataUrl() string {
	if m != nil {
		return m.MetadataUrl
	}
	return ""
}

func (m *StoredDevices) GetMetadataHash() string {
	if m != nil {
		return m.MetadataHash
	}
	return ""
}

func (m *StoredDevices) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *StoredDevices) GetImageHash() string {
	if m != nil {
		return m.ImageHash
	}
	return ""
}

func (m *StoredDevices) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*StoredDevices)(nil), "cometa.devices.StoredDevices")
}

func init() { proto.RegisterFile("devices/stored_devices.proto", fileDescriptor_3704b1dd08f5317d) }

var fileDescriptor_3704b1dd08f5317d = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x8e, 0x12, 0x31,
	0x18, 0xc7, 0x19, 0x85, 0x75, 0xe9, 0x2e, 0xeb, 0x6e, 0x35, 0xa6, 0x31, 0x64, 0x32, 0x21, 0x1e,
	0x88, 0x31, 0x40, 0xe2, 0x13, 0x80, 0x1e, 0x3c, 0x12, 0x0c, 0x17, 0x2f, 0xa6, 0xb4, 0x9f, 0xd8,
	0xa4, 0xd3, 0x92, 0xb6, 0x23, 0xf0, 0x16, 0x3e, 0x96, 0x47, 0x8e, 0x1e, 0x0d, 0x3c, 0x80, 0xaf,
	0x60, 0xda, 0x32, 0xce, 0x4c, 0xd8, 0xdb, 0x7c, 0xbf, 0xff, 0xaf, 0x5f, 0xbe, 0x69, 0x3f, 0xd4,
	0xe7, 0xf0, 0x43, 0x30, 0xb0, 0x63, 0xeb, 0xb4, 0x01, 0xfe, 0xf5, 0x5c, 0x8e, 0x36, 0x46, 0x3b,
	0x8d, 0xef, 0x98, 0xce, 0xc1, 0xd1, 0xd1, 0x99, 0x0e, 0xfe, 0xb6, 0x51, 0xef, 0x73, 0x10, 0x3f,
	0x46, 0x82, 0x5f, 0xa2, 0x8e, 0x50, 0x1c, 0x76, 0x24, 0xc9, 0x92, 0x61, 0x77, 0x11, 0x0b, 0xfc,
	0x06, 0xf5, 0xe2, 0x91, 0x29, 0x63, 0xba, 0x50, 0x8e, 0x3c, 0x09, 0x69, 0x13, 0xe2, 0x0c, 0xdd,
	0x44, 0xf0, 0x41, 0x52, 0x6b, 0xc9, 0xd3, 0xe0, 0xd4, 0x11, 0x1e, 0xa0, 0x5b, 0xbd, 0x55, 0x60,
	0xa6, 0x9c, 0x1b, 0xb0, 0x96, 0xb4, 0x83, 0xd2, 0x60, 0xbe, 0x4b, 0x61, 0x2b, 0xa5, 0x13, 0xbb,
	0xd4, 0x90, 0x9f, 0x06, 0x2c, 0x33, 0x7a, 0x5b, 0x3a, 0x57, 0x71, 0x9a, 0x06, 0xc4, 0x13, 0xf4,
	0x22, 0xa7, 0xaa, 0xf8, 0x46, 0x99, 0x2b, 0x4c, 0xd5, 0xef, 0x59, 0x70, 0x1f, 0x8b, 0xfc, 0x74,
	0x1b, 0x23, 0x18, 0xcc, 0xc1, 0x2c, 0x95, 0x70, 0xe4, 0x3a, 0x4b, 0x86, 0xed, 0x45, 0x83, 0xe1,
	0x77, 0xe8, 0x81, 0xe9, 0x3c, 0x17, 0xd6, 0x0a, 0xad, 0x4a, 0xb1, 0x1b, 0xc4, 0xcb, 0xc0, 0x4f,
	0xba, 0x12, 0x52, 0x0a, 0xb5, 0x9e, 0x83, 0x11, 0x9a, 0x13, 0x94, 0x25, 0xc3, 0xce, 0xa2, 0x09,
	0xf1, 0x5b, 0x74, 0xef, 0xb4, 0xa3, 0x72, 0x26, 0xa4, 0x04, 0xee, 0x0f, 0x5a, 0x72, 0x13, 0xc4,
	0x0b, 0xee, 0x6f, 0x47, 0x52, 0xeb, 0xe6, 0x74, 0x9f, 0x83, 0x72, 0xe4, 0x36, 0x68, 0x75, 0xe4,
	0x0d, 0xff, 0xc6, 0x9c, 0x3a, 0xba, 0x34, 0x92, 0xf4, 0xe2, 0xfd, 0xd5, 0x90, 0xff, 0xcf, 0xb2,
	0xfc, 0x44, 0xed, 0x77, 0x72, 0x17, 0x5f, 0xa1, 0xce, 0xf0, 0x6b, 0x74, 0x2d, 0x72, 0xba, 0x06,
	0xdf, 0xe2, 0x79, 0xc8, 0xff, 0xd7, 0xb8, 0x8f, 0xba, 0xe1, 0x3b, 0x1c, 0xbe, 0x0f, 0x61, 0x05,
	0x7c, 0xca, 0x0c, 0x50, 0x07, 0x7c, 0xea, 0xc8, 0x43, 0xb8, 0x99, 0x0a, 0xcc, 0x26, 0xbf, 0x8e,
	0x69, 0x72, 0x38, 0xa6, 0xc9, 0x9f, 0x63, 0x9a, 0xfc, 0x3c, 0xa5, 0xad, 0xc3, 0x29, 0x6d, 0xfd,
	0x3e, 0xa5, 0xad, 0x2f, 0xaf, 0xe2, 0x6e, 0x8e, 0x77, 0xe3, 0x72, 0x85, 0xdd, 0x7e, 0x03, 0x76,
	0x75, 0x15, 0x56, 0xf7, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0xcc, 0xa9, 0x6c, 0xda,
	0x02, 0x00, 0x00,
}

func (m *StoredDevices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintStoredDevices(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ImageHash) > 0 {
		i -= len(m.ImageHash)
		copy(dAtA[i:], m.ImageHash)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.ImageHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.MetadataHash) > 0 {
		i -= len(m.MetadataHash)
		copy(dAtA[i:], m.MetadataHash)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.MetadataHash)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MetadataUrl) > 0 {
		i -= len(m.MetadataUrl)
		copy(dAtA[i:], m.MetadataUrl)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.MetadataUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LastPayment != 0 {
		i = encodeVarintStoredDevices(dAtA, i, uint64(m.LastPayment))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalBilledUnits != 0 {
		i = encodeVarintStoredDevices(dAtA, i, uint64(m.TotalBilledUnits))
		i--
		dAtA[i] = 0x58
	}
	if m.BillingPeriod != 0 {
		i = encodeVarintStoredDevices(dAtA, i, uint64(m.BillingPeriod))
		i--
		dAtA[i] = 0x50
	}
	if m.CommissionPerUnit != 0 {
		i = encodeVarintStoredDevices(dAtA, i, uint64(m.CommissionPerUnit))
		i--
		dAtA[i] = 0x48
	}
	if m.PricePerUnit != 0 {
		i = encodeVarintStoredDevices(dAtA, i, uint64(m.PricePerUnit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ManufacturerAddress) > 0 {
		i -= len(m.ManufacturerAddress)
		copy(dAtA[i:], m.ManufacturerAddress)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.ManufacturerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeviceClass) > 0 {
		i -= len(m.DeviceClass)
		copy(dAtA[i:], m.DeviceClass)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.DeviceClass)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceAccount) > 0 {
		i -= len(m.DeviceAccount)
		copy(dAtA[i:], m.DeviceAccount)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.DeviceAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredDevices(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredDevices(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredDevices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.DeviceAccount)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.DeviceClass)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.ManufacturerAddress)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	if m.PricePerUnit != 0 {
		n += 1 + sovStoredDevices(uint64(m.PricePerUnit))
	}
	if m.CommissionPerUnit != 0 {
		n += 1 + sovStoredDevices(uint64(m.CommissionPerUnit))
	}
	if m.BillingPeriod != 0 {
		n += 1 + sovStoredDevices(uint64(m.BillingPeriod))
	}
	if m.TotalBilledUnits != 0 {
		n += 1 + sovStoredDevices(uint64(m.TotalBilledUnits))
	}
	if m.LastPayment != 0 {
		n += 1 + sovStoredDevices(uint64(m.LastPayment))
	}
	l = len(m.MetadataUrl)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.MetadataHash)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovStoredDevices(uint64(l))
	}
	l = len(m.ImageHash)
	if l > 0 {
		n += 2 + l + sovStoredDevices(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovStoredDevices(uint64(m.CreatedAt))
	}
	return n
}

func sovStoredDevices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredDevices(x uint64) (n int) {
	return sovStoredDevices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredDevices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredDevices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredDevices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerUnit", wireType)
			}
			m.PricePerUnit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PricePerUnit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionPerUnit", wireType)
			}
			m.CommissionPerUnit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionPerUnit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPeriod", wireType)
			}
			m.BillingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBilledUnits", wireType)
			}
			m.TotalBilledUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBilledUnits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPayment", wireType)
			}
			m.LastPayment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPayment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStoredDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredDevices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredDevices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredDevices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredDevices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredDevices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredDevices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredDevices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredDevices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredDevices = fmt.Errorf("proto: unexpected end of group")
)
